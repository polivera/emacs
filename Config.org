#+title: Emacs configuration file
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el
#+OPTIONS: toc:nil

This is my personal emacs configuration. I will be using org-babel to generate the configuration file based on this org file.
=REMEMBER= to install sqlite3

* Contents Table :toc:
- [[#basic-configuration][Basic Configuration]]
- [[#font-configuration][Font Configuration]]
- [[#package][Package]]
  - [[#package-vertico][Vertico]]
  - [[#package-consult][Consult]]
  - [[#package-doom-modeline][Doom Modeline]]
  - [[#package-rainbow-delimiters][Rainbow Delimiters]]
  - [[#package-which-key][Which Key]]
  - [[#package-catppuccin][Catppuccin Theme]]
  - [[#package-icons][Icons]]
  - [[#package-general][General]]
  - [[#package-evil][Evil]]
  - [[#package-hydra][Hydra]]
  - [[#package-projectile][Projectile]]
  - [[#package-magit][Magit]]
  - [[#package-forge][Forge]]
  - [[#package-org][Org Mode]]
- [[#keymaps][Keymaps]]


* Package manager
:properties:
:custom_id: package-manager
:end:
I use [[https://github.com/radian-software/straight.el][straight.el]] to manage emacs packages. It will also integrate with use-package.

#+begin_src emacs-lisp

  ;; Install Straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
		 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
		(bootstrap-version 6))
	(unless (file-exists-p bootstrap-file)
	  (with-current-buffer
		  (url-retrieve-synchronously
		   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
		   'silent 'inhibit-cookies)
		(goto-char (point-max))
		(eval-print-last-sexp)))
	(load bootstrap-file nil 'nomessage))
  ;; Prevent package.el loading packages prior to their init-file loading.
  (setq package-enable-at-startup nil)

  ;; use-package integration with straight.el
  (straight-use-package 'use-package)

#+end_src


* Basic Configuration
:properties:
:custom_id: basic-configuration
:end:
This section contains the basic configuration, like wether or not show startup message, visible bell, etc.
#+begin_src emacs-lisp 
  ;; Configuration start
  (setq inhibit-startup-message t)    ; Remove startup message
  ;; Also here you can do 'system-type' so we don't show visible bell on macos
  (setq visible-bell t)               ; Make notification visible instead of sound

  (scroll-bar-mode -1)                ; Disable scrollbar
  (tool-bar-mode -1)                  ; Disable toolbar
  (tooltip-mode -1)                   ; Disable tooltip
  (menu-bar-mode -1)                  ; Disable menubar
  (set-fringe-mode '(10 . 10))        ; Set left and right margin in pixels

  ;; Enable line numbers
  (column-number-mode)
  (global-display-line-numbers-mode t)
  (setq display-line-numbers-type 'relative)
  ;; Disable line numners for some modes
  (dolist (mode '(
                  ;;org-mode-hook
                  term-mode-hook
                  dired-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook))
          (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (setq-default tab-width 4)
  (setq-default indent-tabs-mode nil)

#+end_src


* Config folder declutter
This steps will declutter the user configuration file so it will make version control easier.
#+begin_src emacs-lisp

  ;; Create a tmp folder inside emacs config so all the backup files go there
  (setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))

  ;; Create another tmp directory for auto-saave files
  (make-directory (expand-file-name "tmp/auto-saves" user-emacs-directory) t)

  ;; Set auto-saves to be store in the new folder
  (setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/session" user-emacs-directory)
    auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))

  ;; If you want to disable lock files, uncomment this line (NOT RECOMMENDED)
  ;(setq create-lockfiles nil)

  ;; Adding package to take care of the rest
  (use-package no-littering
    :straight t)

#+end_src


* Font Configuration
:properties:
:custom_id: font-configuration
:end:
This set the default mode for either fix or variable type.
The *variable pitch* type is being used for the majority of the org-mode stuff except code snippets and tables.
The *fixed pitch* type font is used for all the rest of the text.

#+begin_src emacs-lisp

  ;; Load fonts
  (set-face-attribute 'default nil :font "SauceCodePro Nerd Font" :height 120)
  (set-face-attribute 'fixed-pitch nil :font "SauceCodePro Nerd Font" :height 120)
  (set-face-attribute 'variable-pitch nil :font "Comfortaa" :height 120)

#+end_src


* Packages
:properties:
:custom_id: packages
:end:

** Vertico
:properties:
:custom_id: package-vertico
:end:
The [[https://github.com/minad/vertico][Vertico.el]] package is used for interactive completion. It allows Emacs to have a completion list.
We also use [[https://www.emacswiki.org/emacs/SaveHist][Save Hist]] included plugin so vertico can order list using usage history.
#+begin_src emacs-lisp

  ;; Vertico package
  (use-package vertico
	:straight t
	;; Fix this ------
	:bind (:map vertico-map
				("C-j" . vertico-next)
				("C-k" . vertico-previous)
				("C-q" . vertico-exit))
	:init
	(vertico-mode)

	;; Different scroll margin
	; (setq vertico-scroll-margin 0)

	;; Show more candidates
	(setq vertico-count 20)

	;; Grow and shrink the Vertico minibuffer
	; (setq vertico-resize t)

	;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
	; (setq vertico-cycle t)
	)

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
	:straight t
	:init (savehist-mode))

#+end_src

** Consult
:properties:
:custom_id: package-consult
:end:
The [[https://github.com/minad/consult][Consult.el]] package provides search and navigation commands. This will integrate with [[#vertico][vertico]] to show list matching your searching criteria.
#+begin_src emacs-lisp

  ;; Consult package
  (use-package consult
    :straight t
    :hook (completion-list-mode . consult-preview-at-point-mode)
    :config
    (setq consult-project-root-function #'projectile-project-root)
  )

#+end_src

** Orderless
:properties:
:custom_id: package-orderless
:end:
[[https://github.com/oantolin/orderless][Orderless]] completion style for emacs
#+begin_src emacs-lisp
(use-package orderless
  :straight t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** Marginalia
:properties:
:custom_id: package-marginalia
:end:
[[https://github.com/minad/marginalia/][Marginalia]] adds help guide to the minibuffer
#+begin_src emacs-lisp

  ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
  :straight t
  ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
  ;; available in the *Completions* buffer, add it to the
  ;; `completion-list-mode-map'.
  :bind (:map minibuffer-local-map
         ("M-A" . marginalia-cycle))
  ;; The :init section is always executed.
  :init

  ;; Marginalia must be actived in the :init section of use-package such that
  ;; the mode gets enabled right away. Note that this forces loading the
  ;; package.
  (marginalia-mode))

#+end_src

** Embark
:properties:
:custom_id: package-embark
:end:
[[https://github.com/oantolin/embark/][Embark]] makes easy to choose a command
#+begin_src emacs-lisp

  (use-package embark
    :straight t

    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    ;; Show the Embark target at point via Eldoc.  You may adjust the Eldoc
    ;; strategy, if you want to see the documentation from multiple providers.
    (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

#+end_src

*** Make embark and consult work together
#+begin_src emacs-lisp
;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :straight t ; only need to install it, embark loads it after consult if found
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** Doom Modeline
:properties:
:custom_id: package-doom-modeline
:end:
[[https://github.com/seagle0128/doom-modeline][Doom Modeline]] is a fancy and fast modeline inspired by minimali
#+begin_src emacs-lisp

  ;; Doom Modeline
  (use-package doom-modeline
	:straight t
	:init (doom-modeline-mode 1))
  
#+end_src
** Treemacs
[[https://github.com/Alexander-Miller/treemacs][Treemacs]] its a tree layout file explorer for Emacs
#+begin_src emacs-lisp

  (use-package treemacs
    :straight t
    :defer t
    :init
      (with-eval-after-load 'winum
        (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (when treemacs-python-executable
        (treemacs-git-commit-diff-mode t))

      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil)

    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t d"   . treemacs-select-directory)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
    :after (treemacs evil)
    :straight t)

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :straight t)

  ;;(use-package treemacs-icons-dired
    ;;:after (all-the-icons)
    ;;:hook (dired-mode . treemacs-icons-dired-enable-once)
    ;;:straight t)

  (use-package treemacs-magit
    :after (treemacs magit)
    :straight t)

  (use-package lsp-treemacs
    :after lsp
    :straight t)

  ;;(use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
    ;;:after (treemacs persp-mode) ;;or perspective vs. persp-mode
    ;;:ensure t
    ;;:config (treemacs-set-scope-type 'Perspectives))

  ;;(use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
    ;;:after (treemacs)
    ;;:ensure t
    ;;:config (treemacs-set-scope-type 'Tabs))
#+end_src
** Rainbow Delimiters
:properties:
:custom_id: package-rainbow-delimiters
:end:
[[https://github.com/Fanael/rainbow-delimiters][Raibow Delimiters]], as the name suggest, is a rainbow-like parentheses mode
#+begin_src emacs-lisp

  ;; Rainbow delimiter
  (use-package rainbow-delimiters
	:straight t
	:hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** Which Key
:properties:
:custom_id: package-which-key
:end:
Emacs [[https://github.com/justbur/emacs-which-key][Which Key]] plugin. This will display legends at the botton showing the list of combitation that follow the one you just did.
#+begin_src emacs-lisp

  ;; Which key
  (use-package which-key
	:straight t
	:init (which-key-mode)
	:config
	(setq which-key-idle-delay 0.2))

#+end_src

** Catppuccin Theme
:properties:
:custom_id: package-catppuccin-theme
:end:
[[https://github.com/catppuccin/emacs][Catppuccin Theme]] for emacs
#+begin_src emacs-lisp

  ;; Insatll Catppuccin theme
  (use-package catppuccin-theme
	:straight t
	:config
	(setq catppuccin-flavor 'mocha)
	:init
	(load-theme 'catppuccin t))

#+end_src

** Icons
:properties:
:custom_id: package-icons
:end:
Some icons packages like [[https://github.com/domtronn/all-the-icons.el][all-the-icons]] and [[https://github.com/rainstormstudio/nerd-icons.el][nerd-icons]]. I should already have the fonts on the dotfiles, but just in case I add them here. Remember to run the commands ~all-the-icons-install-fonts~ and ~nerd-icons-install-fonts~.
#+begin_src emacs-lisp

  ;; Icons
  (use-package all-the-icons
	:straight t
	:if (display-graphic-p))
  (use-package nerd-icons
	:straight t)

#+end_src

** General
:properties:
:custom_id: package-general
:end:
[[https://github.com/noctuid/general.el][General.el]] provides a convenient method for binding keys.
#+begin_src emacs-lisp

  (use-package general
	:straight t
	:config
	(general-create-definer poli/leader-keys
							:keymaps '(normal insert visual emacs)
							;; This will be used as a leader in all modes but insert
							:prefix "SPC"
							;; This will be used as a leader key when on insert mode
							:global-prefix "C-SPC"))

#+end_src

** Evil
:properties:
:custom_id: package-evil
:end:
[[https://github.com/emacs-evil/evil][Evil]] is an extensible vi layer for emacs.
This also install [[https://github.com/emacs-evil/evil-collection][Evil Collection]] that is a collection for key-bindings for different emacs modes.
#+begin_src emacs-lisp

  (use-package evil
    :straight t
    :init
    ;; TODO: Learn what this does
    (setq evil-want-integration t)
    ;; Integration with other modes deactivate becase another package is used for that
    (setq evil-want-keybinding nil)
    ;; Make it so C-u scroll instead of emacs default behaviour
    (setq evil-want-C-u-scroll t)
    (evil-mode 1)
    :config
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    (evil-set-undo-system 'undo-redo)

    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line))

  (use-package evil-collection
    :straight t
    :after evil
    :init
    (evil-collection-init))

#+end_src
** Hydra
:properties:
:custom_id: package-hydra
:end:
The package [[https://github.com/abo-abo/hydra][Hydra]] is used to bind family of related commands. Basically instead of hold a key combination and press another. You use hydra to press a shortcut and not have to keep it.
#+begin_src emacs-lisp

  ;; Hydra package
  (use-package hydra
	:straight t)

  ;; Hydra definitions
  (defhydra hydra-text-scale (:timeout 4)
	"scale text"
	("j" text-scale-increase "in")
	("k" text-scale-decrease "out")
	("r" (text-scale-set 0) "reset")
	("q" nil "finish" :exit t))

#+end_src

** Projectile
:properties:
:custom_id: package-projectile
:end:
[[https://github.com/bbatsov/projectile][Projectile.el]] package give the ability to identify files that constitute a project, like a ~package.json~ for Node or ~composer.json~ for php.
#+begin_src emacs-lisp

  ;; Projectile
  (use-package projectile
	:straight t
	:init
	(projectile-mode)
	:config
	(when (file-directory-p "~/Projects")
	  ;; Limit the amount of subdirectories on which projectile will look into
	  (setq projectile-project-search-path '(("~/Projects" . 4))))
	;; This will show the directory structure when you switch project
	(setq projectile-switch-project-action #'projectile-dired))

#+end_src
** Magit
:properties:
:custom_id: package-magit
:end:
[[https://magit.vc/][Magit]] is a text-based UI for Git
#+begin_src emacs-lisp

  ;; Magit
  (use-package magit
	:straight t
	:custom
	(magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1))

#+end_src
** Forge
:properties:
:custom_id: package-forge
:end:
[[https://github.com/magit/forge][Forge]] work on Github or Gitlab from the confort of [[#package-magit][magit]]
#+begin_src emacs-lisp

  ;; Forge
  (use-package forge
	:straight t
	:after magit)

#+end_src
** Org Mode
:properties:
:custom_id: package-org
:end:
text
#+begin_src emacs-lisp

	;; Org Mode
  (defun poli/org-mode-setup ()
    (variable-pitch-mode 0))

  (use-package org
	:straight t
	:hook (org-mode . poli/org-mode-setup)
	:config
	;; Face exceptions: These are the modes that will keep the fixed-pitch font
	(set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
	(set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
	(set-face-attribute 'org-table nil :inherit 'fixed-pitch)


	;; Structure templates for code snippets, used on org-babel
	;; org-tempo is required for the templates to work
	(require 'org-tempo)
	(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))

	)

  (defun poli/org-auto-tangle ()
  (when (string-equal (buffer-file-name)
					  (expand-file-name "~/Projects/Personal/emacs/Config.org"))
  (let ((org-confirm-babel-evaluate nil))
  (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'poli/org-auto-tangle)))

  (use-package org-bullets
    :straight t
    :after org
    :hook (org-mode . org-bullets-mode))

#+end_src

** Flycheck
:properties:
:custom_id: package-flycheck
:end:
[[https://www.flycheck.org/en/latest/index.html][Flycheck]] its a syntax checking for GNU Emacs
#+begin_src emacs-lisp
(use-package flycheck
  :straight t
  :init (global-flycheck-mode))
#+end_src

** Company
:properties:
:custom_id: package-company
:end:
[[http://company-mode.github.io/][Company]] its a text completion framework for Emacs.
#+begin_src emacs-lisp

  (use-package company
    :straight t
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
            ("<tab>" . company-complete-selection))
          (:map lsp-mode-map
            ("<tab>" . company-indent-or-complete-common))
    :config
    (company-keymap--unbind-quick-access company-active-map)
    (setq company-idle-delay 0.0
          company-minimum-prefix-length 1))

#+end_src

We could also improve the company UI with the [[https://github.com/sebastiencs/company-box][Company Box]] package
#+begin_src emacs-lisp

  (use-package company-box
    :straight t
    :hook (company-mode . company-box-mode)
    :config
    (setq lsp-ui-doc-position 'bottom))

#+end_src

** Eshell
Eshell buildin package configuration
#+begin_src emacs-lisp

  (defun poli/eshell-config ()
    ;; Save command history
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)
    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-function 'eshell-truncate-buffer)
    ;; Bind some evil mode keys
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'eshell-list-history)
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)

    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignore-dups t
          eshell-scroll-to-bottom-on-input t))

  (use-package eshell-git-prompt
    :straight t)

  (use-package eshell
    :straight t
    :hook (eshell-first-time-mode . poli/eshell-config)
    :config
    (eshell-git-prompt-use-theme 'powerline))

#+end_src


* LSP
Language server protocol configuration for various languages
** Global LSP Configuration
The first thing we need to do is install the [[https://emacs-lsp.github.io/lsp-mode/][LSP Mode]] package and configure it.
#+begin_src emacs-lisp

  (defun poli/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :straight t
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (lsp-enable-which-key-integration t)
    :hook (lsp-mode . poli/lsp-mode-setup))

#+end_src

** LSP UI
The package [[https://github.com/sebastiencs/company-box][lsp-ui]] improves the UI of lsp mode
#+begin_src emacs-lisp

  (use-package lsp-ui
    :straight t
    :hook (lsp-mode . lsp-ui-mode))
  
#+end_src

** Golang
Golang is included in emacs, you just have to create a hook
#+begin_src emacs-lisp

  ;; Golang configuration
  (use-package go-mode
  :straight t
  :hook ((go-mode . lsp-deferred)
         (go-mode . company-mode))
  :bind (:map go-mode-map
          ("<f6>" . gofmt)
          ("C-c 6" . gofmt))
  :config
  (require 'lsp-go)
  (setq lsp-go-analyses
    '((field-alignment . t)
      (nillness . t)))
  ;; Gopath
  (add-to-list 'exec-path "~/.local/share/go/bin"))

#+end_src

** Typescript
[[https://github.com/emacs-typescript/typescript.el][Typescript]] LSP configuration for emacs
#+begin_src emacs-lisp

  (use-package typescript-mode
    :straight t
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))

#+end_src


* Keymaps
:properties:
:custom_id: keymaps
:end:
List of keybindings for emacs (normally using general)
#+begin_src emacs-lisp

  ;; Key Definition
  (poli/leader-keys
    ;; Projectile shortcuts
    "p" '(projectile-command-map :which-key "Projectile")

    ;; Write to file
    "w" '(save-buffer :which-key "save buffer")

    ;; Treemacs
    "n" '(treemacs :which-key "open treemacs")

    ;; Find stuff
    "f" '(:ignore t :which-key "find")
    "ff" '(:ignore :which-key "files in project")
    "ffp" '(projectile-find-file :which-key "git files")
    "ffa" '(consult-file :which-key "all files")
    "fb" '(:ignore :which-key "buffers")
    "fbp" '(projectile-switch-to-buffer :which-key "project buffers")
    "fba" '(consult-buffer :which-key "project buffers")
    "fg" '(consult-ripgrep :which-key "all buffers")
    ;; Toggles
    "t"  '(:ignore t :which-key "toggles")
    "ts" '(hydra-text-scale/body :which-key "scale text")
    "tt" '(consult-theme :which-key "choose theme")
  )
#+end_src



* Packages to check
:properties:
:custom_id: packages-to-check
:end:
The list of not installed packages that I ought to check

** TODO [[https://github.com/Wilfred/helpful][Helpful Package]]
Helpful is an alternative to the built-in Emacs help that provides much more contextual information.
