#+title: Emacs Configuration File
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

* Installing Package Manager
Using [[https://github.com/progfolio/elpaca][Elpaca]] as package manager
#+begin_src emacs-lisp
  ;; Installing ELPACA Package Manager
  (defvar elpaca-installer-version 0.5)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                :ref nil
                                :files (:defaults (:exclude "extensions"))
                                :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
          (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                   ((zerop (call-process "git" nil buffer t "clone"
                                         (plist-get order :repo) repo)))
                   ((zerop (call-process "git" nil buffer t "checkout"
                                         (or (plist-get order :ref) "--"))))
                   (emacs (concat invocation-directory invocation-name))
                   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                         "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                   ((require 'elpaca))
                   ((elpaca-generate-autoloads "elpaca" repo)))
              (progn (message "%s" (buffer-string)) (kill-buffer buffer))
            (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable :elpaca use-package keyword.
    (elpaca-use-package-mode)
    ;; Assume :elpaca t unless otherwise specified.
    (setq elpaca-use-package-by-default t))

  ;; Block until current queue processed
  (elpaca-wait)
#+end_src
* Basic Configuration
** Set variables
Set some custom variables
#+begin_src emacs-lisp
  (defvar poli/tmp_folder (expand-file-name "tmp" user-emacs-directory))
#+end_src
** Remove startup banner
This command removes the splash screen at emacs startup.
#+begin_src emacs-lisp
    (setq inhibit-startup-message t)    ; Remove startup message
#+end_src
** Mac OS specific configurations
This will force mac to use command as meta instead of option.
I still map right-control as `'control` because I have modify the CapsLock as control
#+begin_src emacs-lisp
    ;; In MacOS change option for command (to keep things the same)
    (if (eq system-type 'darwin)
        (setq mac-command-modifier 'meta
              mac-option-modifier nil
              mac-control-modifier 'control
              mac-right-command-modifier 'super
              mac-right-control-modifier 'control))
#+end_src
** Set visible bell instead of sound
Except in macos because its anoying
#+begin_src emacs-lisp
    (if (not (eq system-type 'darwin))
        (setq visible-bell t))               
#+end_src
** Turn off some UI elements
#+begin_src emacs-lisp
    (scroll-bar-mode -1)                ; Disable scrollbar
    (tool-bar-mode -1)                  ; Disable toolbar
    (tooltip-mode -1)                   ; Disable tooltip
    (menu-bar-mode -1)                  ; Disable menubar
    (set-fringe-mode '(10 . 10))        ; Set left and right margin in pixels
#+end_src
** Enable line number and make it relative
Also remove line number on certain modes
#+begin_src emacs-lisp
    ;; Enable line numbers
    (column-number-mode)
    (global-display-line-numbers-mode t)
    (setq display-line-numbers-type 'relative)

    ;; Disable line numners for some modes
    (dolist (mode '(
                    ;;org-mode-hook
                    term-mode-hook
                    dired-mode-hook
                    shell-mode-hook
                    treemacs-mode-hook))
            (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src
** Tab width and indent configuration
#+begin_src emacs-lisp
    ;; Tab configuration
    (setq-default tab-width 4)
    (setq-default indent-tabs-mode nil)
#+end_src
** Turn on savehist
#+begin_src emacs-lisp
  ;; (savehist-mode 1)
  (use-package savehist
    :elpaca nil
    :init
    (savehist-mode))
#+end_src

** Set backup file destination
#+begin_src emacs-lisp
  ;; Create another tmp directory for auto-saave files
  (make-directory poli/tmp_folder t)

  ;; Create a tmp folder inside emacs config so all the backup files go there
  (setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))

  ;; Set auto-saves to be store in the new folder
  (setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/session" user-emacs-directory)
      auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))

#+end_src

* ORG Mode
** Creating ORG setup function
This snippet create a org-setup function that will be called on org-mode start (after configuring it as a hook.
#+begin_src emacs-lisp
      (defun poli/org-setup()
        ;; Should I remove variable pitch font from org mode?
        (variable-pitch-mode 0)
        (local-set-key (kbd "C-<space>") 'tempo-complete-tag)
        (require 'org-tempo)
        (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  )
#+end_src

** Enabling org mode
This will enable org mode, add the function previously define on the hook section and add templates
#+begin_src emacs-lisp
    (use-package org
        :demand t
        :hook (org-mode . poli/org-setup))
#+end_src

* Theme and Visuals
** Font configuration
#+begin_src emacs-lisp
    ;; Load fonts
    ;; -----------------------------------------------
    (set-face-attribute 'default nil :font "JetBrainsMono Nerd Font" :height 105)
    (set-face-attribute 'fixed-pitch nil :font "JetBrainsMono Nerd Font" :height 105)
#+end_src

** Color Scheme
#+begin_src emacs-lisp
    ;; EF Themes
    ;; -----------------------------------------------
    (use-package ef-themes
        :demand t
        :config
        (load-theme 'ef-maris-dark t))
#+end_src

** Modeline
#+begin_src emacs-lisp
    ;; Doom Modeline
    ;; -----------------------------------------------
    (use-package doom-modeline
        :demand t
        :config
        (doom-modeline-mode 1))
#+end_src

* Keybinding related config
** Evil Mode Configuration
*** Base Evil Config
#+begin_src emacs-lisp
    ;; Evil Mode
    ;; -----------------------------------------------
    (use-package evil
        :demand t
        :init
        (setq evil-want-keybinding nil)
        (setq evil-want-C-u-scroll t)
        :config
        ;; Evil Startup
        (evil-mode)
        ;; Evil config
        (evil-set-undo-system 'undo-redo)
        ;; Evil keybindings
        (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
        ;(define-key evil-insert-state-map (kbd "TAB") 'tab-to-tab-stop)
        (evil-set-initial-state 'slime-repl-mode 'emacs))


#+end_src

*** Evil Collection
#+begin_src emacs-lisp
    ;; Evil Collections
    ;; -----------------------------------------------
    (use-package evil-collection
        :after evil
        :config
        (evil-collection-init))
#+end_src

*** Evil Comment
#+begin_src emacs-lisp
(use-package evil-commentary
  :after evil
  :config
  (evil-commentary-mode)) ;; globally enable evil-commentary
#+end_src
** General
#+begin_src emacs-lisp
  (use-package general
    :demand t
    :after evil
    :config
    (general-evil-setup)
    ;; integrate general with evil

    ;; set up 'SPC' as the global leader key
    (general-create-definer poli/leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC" ;; set leader
      :global-prefix "M-SPC") ;; access leader in insert mode
  )
#+end_src
** Which Key
#+begin_src emacs-lisp
  (use-package which-key
    :demand t
    :config
    (which-key-mode)
    (setq which-key-idle-delay 0.2))
#+end_src
* Completion System
** Vertico - Vertical Interface Completion Framework
#+begin_src emacs-lisp
  ;; Vertico
  ;; -----------------------------------------------
  ;; VERTical Iteractive Completion Framework
  (use-package vertico
      :demand t
      :bind (:map vertico-map
              ("C-j" . vertico-next)
              ("C-k" . vertico-previous)
              ("C-q" . vertico-exit))
      :config
      (vertico-mode 1))
#+end_src

** Marginalia - Margin Help Details
#+begin_src emacs-lisp
    ;; Marginalia
    ;; Nice description on the completion framework
    ;; entries
    ;; -----------------------------------------------
    (use-package marginalia
        :after vertico
        :config
        (marginalia-mode 1))
#+end_src

** Orderless - Better list sorting
#+begin_src emacs-lisp
    ;; Orderless
    ;; Better matching for vertico
    ;; -----------------------------------------------
    (use-package orderless
        :after vertico
        :custom
        (completion-styles '(orderless basic))
        (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** Consult - Search and navigation commands
#+begin_src emacs-lisp
  (use-package consult
    :demand t
    :config
    (setq consult-project-root-function #'projectile-project-root))
#+end_src

** Corfu - Complete In Region
#+begin_src emacs-lisp
  ;; Corfu
  ;; Auto completion example
  (use-package corfu
    :demand t
    :custom
    (corfu-auto t)          ;; Enable auto completion
    (corfu-auto-delay 0.0)
    ;; (corfu-separator ?_) ;; Set to orderless separator, if not using space
    :bind
    ;; Another key binding can be used, such as S-SPC.
    (:map corfu-map ("M-SPC" . corfu-insert-separator))
    :init
    (global-corfu-mode))
#+end_src

* Project Management
** Projectile
#+begin_src emacs-lisp
    ;; Projectile
    (use-package projectile
        :demand t
        :init
        (projectile-mode)
        :config
        (when (file-directory-p "~/Projects")
        ;; Limit the amount of subdirectories on which projectile will look into
        (setq projectile-project-search-path '(("~/Projects" . 4))))
        ;; This will open a new project in Dired
        (setq projectile-switch-project-action #'projectile-dired))
#+end_src
** Magit
#+begin_src emacs-lisp
  ;; Magit
  (use-package magit
    :demand t
    :custom
    (magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1))
#+end_src

* Software Development
** Tree Sitter
Not many plugins support tree-sitter yet, This is new in Emacs 29
*** Tree Sitter sources
Adding list of tree-sittere sources
#+begin_src emacs-lisp
  ;; Adding treesitter github sources list
  (setq treesit-language-source-alist
  '((bash "https://github.com/tree-sitter/tree-sitter-bash")
    (c "https://github.com/tree-sitter/tree-sitter-c")
    (cmake "https://github.com/uyha/tree-sitter-cmake")
    (common-lisp "https://github.com/theHamsta/tree-sitter-commonlisp")
    (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
    (css "https://github.com/tree-sitter/tree-sitter-css")
    (csharp "https://github.com/tree-sitter/tree-sitter-c-sharp")
    (elisp "https://github.com/Wilfred/tree-sitter-elisp")
    (go "https://github.com/tree-sitter/tree-sitter-go")
    (gomod "https://github.com/camdencheek/tree-sitter-go-mod")
    (html "https://github.com/tree-sitter/tree-sitter-html")
    (js . ("https://github.com/tree-sitter/tree-sitter-javascript" "master" "src"))
    (json "https://github.com/tree-sitter/tree-sitter-json")
    (lua "https://github.com/Azganoth/tree-sitter-lua")
    (make "https://github.com/alemuller/tree-sitter-make")
    (markdown "https://github.com/ikatyang/tree-sitter-markdown")
    (python "https://github.com/tree-sitter/tree-sitter-python")
    (r "https://github.com/r-lib/tree-sitter-r")
    (rust "https://github.com/tree-sitter/tree-sitter-rust")
    (toml "https://github.com/tree-sitter/tree-sitter-toml")
    (tsx . ("https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src"))
    (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src"))
    (yaml "https://github.com/ikatyang/tree-sitter-yaml")))
#+end_src

*** Tree Sitter sources translation
#+begin_src emacs-lisp
  ;; (setq treesit-load-name-override-list
  ;;   '((go-mod "libtree-sitter-go-mod" "tree_sitter_gomod"))
#+end_src
** LSP
*** LSP Base Config
#+begin_src emacs-lisp
  ;; LSP Configuration
  (use-package lsp-mode
    :demand t
    :after corfu
    :custom
    (lsp-completion-provider :none)
    :init
    (setq lsp-keymap-prefix "C-c l")
    (defun poli/lsp-setup ()
        (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
        (lsp-headerline-breadcrumb-mode))
    (defun poli/lsp-completion-setup()
        (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
              '(orderless))) ;; Configure orderless
    :commands
    (lsp lsp-deferred)
    :config
    (lsp-enable-which-key-integration t)
    :hook
    (lsp-mode . poli/lsp-setup)
    (lsp-completion-mode . poli/lsp-completion-setup))
#+end_src
*** LSP UI
#+begin_src emacs-lisp
  (use-package lsp-ui
    :demand t
    :after lsp-mode
    :commands lsp-ui-mode)
#+end_src

*** (FlyCheck) Syntax Checking
#+begin_src emacs-lisp
(use-package flycheck
  :demand t
  :init (global-flycheck-mode))
#+end_src

*** Languages
**** Go
#+begin_src emacs-lisp
  ;; Golang configuration
  (use-package go-mode
  :demand t
  :hook (
    (go-mode . lsp-deferred)
  )
  :bind (:map go-mode-map
        ("<f6>" . gofmt)
  :config
  (require 'lsp-go)
  ;; Set Gopls tags
  (setq lsp-go-env '((GOFLAGS . "-tags=unit")))
  (setq lsp-go-analyses
    '((field-alignment . t)
      (nillness . t)))
  ;; Gopath
  (add-to-list 'exec-path "~/.local/share/go/bin"))
#+end_src

* After package configurations
Wait for elpaca to finish processing the packages
#+begin_src emacs-lisp
  (elpaca-wait)
#+end_src
** Keymaps
*** Consult keybindings
#+begin_src emacs-lisp
  ;; Consult General keybindings
  (poli/leader-keys
    "bb" '(consult-buffer :wk "consult buffer")
    "Bb" '(consult-bookmark :wk "consult bookmark")
    "ht" '(consult-theme :wk "consult theme")
    "sr" '(consult-ripgrep :wk "consult rg")
    "sg" '(consult-grep :wk "consult grep")
    "sG" '(consult-git-grep :wk "consult git grep")
    "sf" '(consult-find :wk "consult find")
    "sF" '(consult-locate :wk "consult locate")
    "sl" '(consult-line :wk "consult line")
    "sy" '(consult-yank-from-kill-ring :wk "consult yank from kill ring")
    "i" '(consult-imenu :wk "consult imenu"))
#+end_src
* The REST
  #+begin_src emacs-lisp

  ;; SLIME Superior Lisp Interaction Mode for Emacs.
  ;; -----------------------------------------------
  (use-package slime
    :demand t
    :config
    ;; Point inferior lisp program to common list implementation
    (setq inferior-lisp-program "sbcl"))

















#+end_src


